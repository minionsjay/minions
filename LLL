import  numpy as np
import numpy.linalg as LA
''''def dotProduct(a,b):
    n=len(a)
    val=0
    for()'''
def scale(a,k):
    return [x*k for x in  a]
def sub(a,b):
    n=len(a)
    c=list(a)
    for i in range(n):
        c[i]-=b[i]
    return c
def GramShmid(B):
    coef=[0 for i in range(len(B))]
    basis=B
    n=len(B)
    print(n)
    for i in range(n):
        te=[0]*n
        te[i]=1
        bi=B[i]
        #print(bi)
        for j in range(i):
            te[j] = np.dot( B[i], basis[j] ) / np.dot(basis[j],basis[j])
            bi = sub( bi, scale( basis[j], te[j] ) )
            print(te,bi)
        basis[i]=bi
        coef[i]=te
    return basis,coef
def Lovaz(norm1,norm2,coef,r):
    return (norm2<(r-coef**2)*norm1)
def size_reduce(basis,coeff,idx1,idx2):
    m=round(coeff[idx1][idx2])
    if(m>1/2):
        basis[idx1]=sub(basis[idx1],scale(basis[idx2],m))
    for j in range(idx2+1):
        coeff[idx1][j]-=m*coeff[idx2][j]


def LLL(inbasis,r):
    n=len(inbasis)
    basis=inbasis
    print("basis",basis)
    gsbasis,coeff=GramShmid(basis)
    print(gsbasis,coeff)
    gsnorm=[np.dot(x,x) for x in gsbasis]
    k=1
    while k<n:
        size_reduce(basis,coeff,k,k-1)
        if (Lovaz(gsnorm[k-1],gsnorm[k],coeff[k][k-1],r)):
            mu=coeff[k][k-1]
            no=gsnorm[k]+mu*mu*gsnorm[k-1]
            
            coeff[k][k-1]=(mu*gsnorm[k-1])/float(no)
            gsnorm[k]*=gsnorm[k-1]/float(no)
            gsnorm[k-1]=no
            basis[k-1],basis[k]=basis[k],basis[k-1]
            for j in range(k-1):
                coeff[k-1][j],coeff[k][j]=coeff[k][j],coeff[k-1][j]
            for j in range(k+1,n):
                coeff[j][k-1],coeff[j][k]=coeff[k][k-1]*coeff[j][k-1]+(1-mu*coeff[k][k-1])*coeff[j][k],coeff[j][k-1]-mu*coeff[j][k]
            k=max(k-1,1)
        else:
            for j in range(k-2,-1,-1):
                size_reduce(basis,coeff,k,j)
            k+=1
    return basis,coeff
inbasis=np.array([[1,-2], [0,-1]])
outbasis,outcoeff=LLL(inbasis,3/4)
print(outbasis)
